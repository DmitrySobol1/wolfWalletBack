//FIXME: Этот эндопоинт постаить в env: WEBHOOKADRESS_FROMSTOCKTOUSER

// для обработки "прихода денег с биржи на адрес пользователя"
app.post('/api/webhook_fromStockToUser', async (req, res) => {
  try {
    const payload = req.body;
    console.log('Получен вебхук payout:', payload);

    // 1. Проверяем обязательный заголовок
    const receivedSignature = req.headers['x-nowpayments-sig'];
    if (!receivedSignature) {
      console.log('Отсутствует заголовок подписи');
      return res.status(400).json({ error: 'Missing signature header' });
    }

    // 2. Безопасная сортировка объекта
    const safeSort = (obj) => {
      const seen = new WeakSet();
      const sort = (obj) => {
        if (obj !== Object(obj)) return obj;
        if (seen.has(obj)) return '[Circular]';
        seen.add(obj);

        return Object.keys(obj)
          .sort()
          .reduce((result, key) => {
            result[key] = sort(obj[key]);
            return result;
          }, {});
      };
      return sort(obj);
    };

    // 3. Генерация и проверка подписи
    const hmac = crypto.createHmac('sha512', process.env.IPN_SECRET_KEY);
    hmac.update(JSON.stringify(safeSort(payload)));
    const expectedSignature = hmac.digest('hex');

    // 4. Безопасное сравнение подписей
    if (
      !crypto.timingSafeEqual(
        Buffer.from(receivedSignature),
        Buffer.from(expectedSignature)
      )
    ) {
      console.log('Неверная подпись');
      return res.status(403).json({ error: 'Invalid signature' });
    }

    console.log('Подписи совпадают');

    // 5. Обработка вебхука (с обработкой ошибок)
    try {
      res.status(200).json({ status: 'success' });
      //TODO: добавить логику, если приходит reject - чтобы пользователю написать msg и вернуть средства с master на его аккаунт

      // await processWebhookTrtFromStockToUser(payload);
    } catch (processError) {
      console.error('Ошибка обработки:', processError);
      res.status(500).json({ error: 'Processing failed' });
    }
  } catch (error) {
    console.error('Ошибка обработки вебхука:', error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});








//FIXME: Этот эндопоинт постаить в env: WEBHOOKADRESS_FROMSTOCKTOUSER_LIMIT

// для обработки "прихода денег с биржи на адрес пользователя"
app.post('/api/webhook_fromStockToUser_limit', async (req, res) => {
  try {
    const payload = req.body;
    console.log('Получен вебхук payout:', payload);

    // 1. Проверяем обязательный заголовок
    const receivedSignature = req.headers['x-nowpayments-sig'];
    if (!receivedSignature) {
      console.log('Отсутствует заголовок подписи');
      return res.status(400).json({ error: 'Missing signature header' });
    }

    // 2. Безопасная сортировка объекта
    const safeSort = (obj) => {
      const seen = new WeakSet();
      const sort = (obj) => {
        if (obj !== Object(obj)) return obj;
        if (seen.has(obj)) return '[Circular]';
        seen.add(obj);

        return Object.keys(obj)
          .sort()
          .reduce((result, key) => {
            result[key] = sort(obj[key]);
            return result;
          }, {});
      };
      return sort(obj);
    };

    // 3. Генерация и проверка подписи
    const hmac = crypto.createHmac('sha512', process.env.IPN_SECRET_KEY);
    hmac.update(JSON.stringify(safeSort(payload)));
    const expectedSignature = hmac.digest('hex');

    // 4. Безопасное сравнение подписей
    if (
      !crypto.timingSafeEqual(
        Buffer.from(receivedSignature),
        Buffer.from(expectedSignature)
      )
    ) {
      console.log('Неверная подпись');
      return res.status(403).json({ error: 'Invalid signature' });
    }

    console.log('Подписи совпадают');

    // 5. Обработка вебхука (с обработкой ошибок)
    try {
      res.status(200).json({ status: 'success' });
      //TODO: добавить логику, если приходит reject - чтобы пользователю написать msg и вернуть средства с master на его аккаунт

      // await processWebhookTrtFromStockToUser_limit(payload);
    } catch (processError) {
      console.error('Ошибка обработки:', processError);
      res.status(500).json({ error: 'Processing failed' });
    }
  } catch (error) {
    console.error('Ошибка обработки вебхука:', error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});